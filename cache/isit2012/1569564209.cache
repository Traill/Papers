{"id":"1569564209","paper":{"title":{"text":"A characterization of the number of subsequences obtained via the deletion channel"},"authors":[{"name":"Y. Liron"},{"name":"M. Langberg"}],"abstr":{"text":"Abstract\u2014 Motivated by the study of deletion channels, this work presents improved bounds on the number of subsequences obtained from a binary sting X of length n under t deletions. It is known that the number of subsequences in this setting strongly depends on the number of runs in the string X; where a run is a maximal sequence of the same character. Our improved bounds are obtained by a structural analysis of the family of r-run strings X, an analysis in which we identify the extremal strings with respect to the number of subsequences. Speciﬁcally, for every r, we present r-run strings with the minimum (respectively maximum) number of subsequences under any t deletions; and perform an exact analysis of the number of subsequences of these extremal strings."},"body":{"text":"Let X ∈ { 0, 1 } n be a binary string of length n, and let t ≤ n be a parameter. In this work, we study the size of the set D t ( X ) of subsequences of X that can be obtained from X via t deletions. The set D t ( X ) and its size play a major role in the design and analysis of communication schemes over deletion channels , i.e., channels in which characters of the transmitted codeword may be deleted, [3]\u2013[5], [7], [8], [10].\nThe analysis of D t ( X ) is challenging as the number of subsequences of a string X obtained by deletions does not depend only on its length n and the number t of deletions, but also strongly depends on its structure. For example, D t ( 0 n ) is of size 1 and equals the single string 0 n −t , while there exist strings X for which D t ( X ) is of size exp ( Ω ( n − t )) . Clearly, | D t ( X )| is at most 2 n −t (as after t deletions we remain with a binary string of length n − t).\nIn his work from 1966, Levenshtein [4] shows (as described in [5]) that the number of subsequences | D t ( X )| strongly depends on the number of runs in the string. Here, a run is a maximal sequence of the same character, and the number of runs in a given string is denoted r (·) . For example r ( 0 n ) = 1 while r ( 0101 . . . 01 ) = n. Speciﬁcally, Levenshtein [4] proves that \t r ( X ) − t + 1\nBounding | D t ( X )| is addressed by Calabi and Hartnett [1], which show that the maximal number of subsequences is obtained from certain strings X, denoted cyclic strings C n , in which r ( X ) = | X | . [1] devise a recursive expression for | D t ( C n )| , to obtain the bound\nRelatively recently, Hirschberg and Regnier [2] revisit the analysis of [1] and obtain an explicit upper bound together with an improved lower bound of the form\nMercier et al. [9] study the setting of small values for t, and present explicit formulas for D t ( X ) for t ≤ 5. However for general values of t the problem remains open. Several of the results above generalize also to arbitrary alphabets.\nThe bounds of [1], [2], [4] are depicted in Figure 1 for the case n = 120 and r = r ( X ) = 24 as a function of t. The lower bounds of both [2] and [4] depend on the number of runs r ( X ) ; and it holds that the lower bound of [2] is superior (i.e., larger) to that of [4]. The upper bound of [4] depends on r ( X ) , while that of [1], [2] does not. Thus each bound is stronger (i.e., smaller) for certain settings of parameters r and t. Roughly speaking, the upper bounds of [1], [2] are stronger than those of [4] for large values of r and t; while the opposite is true for small r and t.\nIn this work, we continue the study of D t ( X ) and present improved upper and lower bounds to those described above. Our analysis is two fold. We start by studying the family of strings X for which r = r ( X ) , and identify the extremal strings\nin this family with respect to the number of subsequences. Speciﬁcally, for every r, we identify two r-run strings, referred to as the balanced r-run string B r and the unbalanced r-run string U r such that for every X it holds that\nLoosely speaking, the string U r = 0101 . . . 01 n −r+1 is the r- run string in which each run is exactly of size 1, except the last run which is of size n − t + 1, and is thus referred to as \u2018unbalanced\u2019 (in the run lengths). The balanced string B r = 0 n/r 1 n/r 0 n/r 1 n/r . . . 1 n/r 0 n/r is the r-run string in which each and every run is of equal length n/r.\nTo obtain Equation (1), we show that any r-run string X can be transformed into the string U r (alternatively B r ) via a series of operations that are monotonic with respect to the number of subsequences. The modiﬁcations we study include a balancing operation, in which given X we shorten the length of one of its runs while increasing the length of another; a ﬂipping operation, in which a preﬁx or sufﬁx of X is replaced by it complement; and an insertion operation in which characters are added to X (see Figures 4(a), 4(b) and 4(c)). A delicate combination of these (and other) operations enable us to establish Equation (1). The modiﬁcations we study and their analysis shed light on the properties of binary strings under the deletion operation and may be of independent interest. We note that for the extreme case of r = n, our unbalanced string U n is exactly the cyclic string C n ; thus we are consistent with the result of [1].\nWe then turn to obtain analytic expressions for | D t ( U r )| and | D t ( B r )| of Equation (1). Our expressions are at least as good as previous bounds in [1], [2], [4] as they are based on speciﬁc r-run strings (U r and B r ), and for a large range of parameters our bounds are strictly tighter. For our improved lower bound, we devise a recursive expression for | D t ( U r )| and present a closed form formula for its evaluation. We then perform an asymptotic evaluation of | D t ( U r )| (assuming large r). A comparison of our improved lower bound with that previously known is depicted in Figure 2. Speciﬁcally, we show that for values of t which are greater than r/3 our lower\nbound improves on those previously known by an exponential multiplicative factor of roughly 2 t −r/3 .\nTo address our improved upper bounds, we ﬁrst present a recursive formula for the computation of | D t ( B r )| . We then extract a closed form solution to our recursive deﬁnition which yields an exact expression for | D t ( B r )| . For example, a numerical comparison of | D t ( B r )| with the upper bounds previously known is depicted in Figure 3 for the value of n = 120 and r = 24 as a function of t. We note that the ex- pression we obtain for | D t ( B r )| involves several summations of certain combinatorial expressions. An asymptotic analysis of our expression is left open in this work and is subject to future research.\nThe remainder of the paper is organized as follows. In section II we present the set of structural operations and tools we use for comparing and bounding the number of subsequences obtained via deletion. This section includes our balancing, ﬂipping, and insertion modiﬁcations. In Section III, we study our ﬁrst family of balanced strings, and show that (for any given number of runs r and deletions t) they have the largest number of subsequences under deletion. In Section IV, we analyze the number of subsequences of balanced strings and in such obtain our upper bound. In Section V, we present our second family of unbalanced strings, and prove that they have the least number of subsequences under any t deletions. Finally, we prove our lower bound by analyzing the number of subsequences of unbalanced strings in Section VI. Due to space limitation, full proofs of our claims are omitted and can be found in the full version of our work [6].\nThe number of subsequences of a string obtained by dele- tions highly depends on the string\u2019s structure. In order to determine the number of subsequences for a given number of deletions, it is not enough to know the length of the string, and not even the number of the string\u2019s runs. Inspired by previous works, we looked for tools that will enable us to analyze the number of subsequences. In this section we\npresent these tools. In subsection II-A we present a method of counting the number of subsequences by partitioning the set of subsequences into subsets characterized by their preﬁx, thus forming a recursive relation. In subsection II-B we present basic operations on strings that always increase (or decrease) the number of subsequences under deletion. Such basic operations allow comparison between the number of subsequences of strings, and are very useful for ﬁnding bounds on the number of subsequences.\nS ( x 1 , . . . , x r ) denotes a binary string with r runs, in which the i th run is of length x i and the ﬁrst symbol is 0, E.g. S ( 1, 2, 3 ) = 011000. We will use the notation n × a to indicate n sequential runs of length a, E.g. S ( 2, 3 × 1, 2 ) = S ( 2, 1, 1, 1, 2 ) = 0010100. D t ( x 1 , . . . , x r ) will be used as short form for D t ( S ( x 1 , . . . , x r )) . C n denotes the binary cyclic string S ( n × 1). We assume the following conventions: ∑ k i=j a i = 0 when j > k. ( n i ) = 0 when i < 0 or i > n. | D t ( X ) = 1 | for t = | X | and t = 0, and | D t ( X ) = 0 | for\nWe found the following lemma (from [2]) very useful. We restate it here and derive a corollary for binary strings. Lemma II.1. [2] For any Σ-string X:\n(i) D t ( X ) = ∑ a ∈Σ D (a) t ( X ) , where for a set G of strings G (a) denotes all members of G starting with a.\n(ii) D (a) t ( X ) = aD t+1 − f (a) ( X [ f ( a ) + 1 : n ]) , where f ( a ) denotes the index of the ﬁrst appearance of a in X, and X [ i : j ] denotes the substring x i . . . x j of X.\nUsing Lemma II.1 we derive the following lemma for binary strings. Proof can be found in full version [6]. Lemma II.2.\n(i) For any binary string X, s.t. X = σ i ǫ j Y for some i, j > 0 and Y ∈ { σ , ǫ } ∗ , | D t ( X )| = | D t ( σ i −1 ǫ j Y )| + | D t −i ( ǫ j −1 Y )| for any t < | X | .\n(i) | D t ( x 1 , . . . , x r )| = | D t ( x 2 , . . . , x r )| + ∑ x 1 i=1 | D t −i ( x 2 − 1, x 3 , . . . , x r )| + 1 | t>n −x 1 .\nIn the following sections we will present families of strings, for which the number of subsequences can be explicitly calculated. In order to use these families of strings to devise bounds on the number of subsequences for general strings, we use basic operations on strings, which allows us to transform one string into another, while monotonically increasing (or decreasing) the number of their subsequences. In this section we list such basic operations.\n1) Insertion operation [Figure 4(a)]: Hirschberg et al. [2] showed that inserting a symbol anywhere in the middle of a string always increases the number of subsequences.\nLemma II.4.[Insertion increases the number of subsequences] [2] For any Σ-strings U, V and any σ ∈ Σ, | D t ( UV )| ≤ | D t ( UσV )| .\n2) Deletion chain rule: The following lemma states a simple useful chain rule.\n3) Flipping operation: We now addresses a ﬂipping oper- ation, depicted in Figure 4(b). Using our ﬂipping operation, it is not hard to present an alternative proof for the maximality of C n w.r.t. the number of subsequences. Proofs appear in [6].\nLemma II.6.[Flipping increases number of subsequences] For any binary strings U, V and for any bit σ, | D t ( UσσV )| ≤ | D t ( UσσV )| , where a denotes the string a in which 0\u2019s are ﬂipped to 1\u2019s, and vice versa.\n4) Balancing operation: [Figure 4(c)] Informally, we refer to a string as balanced, if there is a low variability between the length of the string\u2019s runs. A balancing operation is one that decreases that variability, E.g. shortening a long run and increasing the length of a short run. The following lemma states terms in which balancing a string increases the number of its subsequences, and it is used later to prove maximality of string families. Proof can be found in [6].\nLemma II.7.[Balancing increases the number of subse- quences] For X = S ( x 1 , . . . , x r ) , and for any t > 0, 1 ≤ i < j ≤ r s.t. x i − x j > 1, and { x i+1 , . . . , x j −1 } is sym- metric (i.e. x 2 = x r −1 , x 3 = x r −2 , . . . ), | D t ( x 1 , . . . , x r )| ≤ | D t ( x 1 , . . . , x i −1 , x i − 1, x i+1 , . . . , x j −1 , x j + 1, x j+1 , . . . , x r )| . In other words, decreasing the i-th run by 1, and increasing the j-th run by 1 can only increase the number of subsequences.\nIn this section we deﬁne the family of strings named Balanced strings . We call a string balanced, if all the runs of symbols in the string are of equal length. Formally, we denote by B r,k the binary string of length rk, with r runs, each of length k. E.g. B 3,4 = S ( 4, 4, 4 ) = 000011110000. We prove that of all strings with length rk and r runs, the balanced string has the maximal number of subsequences, under any number of deletions. The main idea of the proof is that any such string X can be transformed into B r,k by repeatably applying the Balancing Lemma II.7. Each such step can only increase the number of subsequences, so if such a series of balance operations can be found, the assertion is proved. An example of the balancing process we use is displayed in Table I.\nTheorem III.1. Let X = S ( x 1 , . . . , x r ) , n = ∑ r i=1 x i , and k = n/r. If k is an integer, then | D t ( X )| ≤ | D t ( B r,k )| .\nWe derive the following corollary for the case where n is not divisible by r.\nCorollary III.1. Let X = S ( x 1 , . . . , x r ) , n = ∑ r i=1 x i , and ¯k = n/r. D t ( X ) ≤ | D t ( B r, ⌈¯k⌉ )| .\nIn this section we present an upper bound for the number of subsequences of a string obtained by deletions. We develop a recursive expression for the exact number of subsequences of a balanced string. We then ﬁnd an explicit form for this expression, and use it to obtain a tight upper bound on the number of subsequences of a general string.\nFor all r, k , Let B \u2032 r,k be the string obtained from B r,k by removing the ﬁrst symbol. E.g. B \u2032 3,5 = S ( 4, 5, 5 ) = 00001111100000. Fix k, and let b ( r, t ) = | D t ( B r,k )| and b \u2032 ( r, t ) = | D t ( B \u2032 r,k )| . From Lemma II.2 we have that | D t ( B r,k )| = | D t ( B \u2032 r,k )| + | D t −k ( B \u2032 r −1,k )| . Using Lemma II.3 carefully we get\n          \n         \nWhen calculating b \u2032 ( r, t ) we expand the recursive expres- sion iteratively, until all b \u2032 expressions reach their boundary condition, and get zero value. The only positive contribution in this sum is from the 1 in the second case: 1 + ∑ k −1 i=1 b \u2032 ( r − 1, t − i ) . By counting how many times this value is added, we can get the explicit value of b \u2032 ( r, t ) . Our expression for b \u2032 ( r, t ) involves several nested summations, and due to space limitations full details of our proof appear in [6].\nTheorem IV.1. | D t ( B r,k )| = b \u2032 ( r, t ) + b \u2032 ( r − 1, t − k ) , where (i) b \u2032 ( r, t ) = ∑ t i=0 #P ( r − ⌊ i k ⌋ − 1, t − i ) , and (ii) #P ( ∆r, ∆t ) = ∑ ⌊\nUsing balanced strings we achieve upper bounds on the number of subsequences of r-run strings. Our bound of The- orem IV.1 is depicted in Figure 3.\nIn the section we deﬁne a second family of strings, named unbalanced strings . We call a string unbalanced, if all of the runs of symbols in the string are of length 1, except for one run. Let U (i) n,r be a binary string of length n with r runs, in which all runs are of length 1, except for the i th run which is of length n − r + 1. We notice via symmetry that | D t ( U (1) n,r )| = | D t ( U (r) n,r )| , and deﬁne u ( n, r, t ) = | D t ( U (1) n,r )| = | D t ( U (r) n,r )| . We will show that these extreme cases have the least number of subsequences among all r-run strings X. First we prove that there exists j s.t. | D t ( X )| ≥ | D t ( U (j) n,r )| , for all t. This is obtained by noticing that the balancing operation of Lemma\nII.7 can be used in the other direction, as an unbalancing operation. To complete the proof we show that for any j, | D t ( U (j) n,r )| ≥ u ( n, r, t ) . Details in [6]. An example of the unbalancing process is displayed in Table II.\nTheorem V.1. [Unbalanced strings have the least subse- quences] For X = S ( x 1 , . . . , x r ) , n = ∑ r i=1 x i , and any 1 ≤ t ≤ n, | D t ( X )| ≥ u ( n, r, t ) .\nIn this section we develop a recursive expression for the number of subsequences of an unbalanced string by deletions. We ﬁnd an explicit form for this expression, and use it to obtain a lower bound on the number of subsequences of a general string. In addition, we show the improvement that our lower bound provides. Proof of all claims appear in [6].\nUsing Lemma II.2 (and other observations) we obtain Lemma VI.1. For all 0 < r ≤ n, 0 < t < n,\nWhere d ( r, t ) = | D t ( C r )| = ∑ t i=0 ( r −t i ) , as proved in [2]. We assume d ( n, 0 ) = 1, and for t < 0, d ( n, t ) = 0.\nSequentially expanding u ( n, r, t ) using Lemma VI.1, until reaching one of the boundary conditions, we have:\nTheorem VI.1. [Closed form formula for u ( n, r, t ) ] For t < n and 2 < r ≤ n:\n(i) when r > t: u ( n, r, t ) = d ( r, t ) + ∑ t −2 i=t+r −n−1 d ( r − 2, i ) ; (ii) when r ≤ t: u ( n, r, t ) = 2 + ∑ r −3 i=t+r −n−1 d ( r − 2, i ) .\nThe results of Theorem V.1 together with Theorem VI.1 lead to the following:\nTheorem VI.2.[Lower bound on the number of subsequences] For all t < n, 2 < r ≤ n and any r-run string X\nWe compare our result to the previous result by Hirschberg et al. | D t ( X )| ≥ d ( r, t ) = ∑ t i=0 ( r −t i ) [2]. We limit the comparison to t ≤ r as for t > r the previous bound gives 0. Lemma VI.2. Let α = t/r. for α ∈ [ 1 3 + 1 r , 1 ) and for t ≤\nFor large n satisfying n > t + r, the improvement that the bound in Theorem VI.2 gives over the result in [2] depends on the ratio between r and t. We depict our improved results in Figure 2.\nIn this work we present several operations on binary strings which are monotone with respect to the number of subsequences under deletion. We show, using the operations studied, that the balanced r-run string B r,k and the unbalanced one U n,r obtain the maximum and respectively minimum number of subsequences under deletion. By devising recursive expressions, we present a precise analysis of the number of subsequences of both B r,k and U n,r under t deletions. For our lower bound, we quantify our expression asymptotically. A direct asymptotic analysis of our expression for | D t ( B r,k )| is left open in this work and is subject to future research.\nTo better express our improved upper bound one may use the connection between the problem of computing the number of subsequences of the balanced string B r,k to the closely related combinatorial problem of determining its number of deletion patters . Assuming k = n/r is integral, the deletion patterns P t ( B r,k ) of B r,k are exactly the set of integer solutions to the equation ∑ r i=1 y i when y i ∈ [ 0, k ] . Notice the restriction that each of the y i \u2019s are bounded by k. Deletion patters in general, and those of B r,k , have been studied in [9], [11], in which certain inclusion exclusion type summations are presented to characterize their size, along side certain asymptotic estimations. It is immediate that one can bound the size of D t ( B r,k ) by its analog P t ( B r,k ) and in such quantify our improvement over previous bounds. Speciﬁcally, this implies for values t which are close to n/2 (an intriguing setting for t in the context of deletion channels [3]) and for sufﬁciently large r and k; that | P t ( B r,k )| , and thus our bound of | D t ( B r,k )| , improves on those previously known [1], [2], [4] by an exponential multiplicative factor of 2 Ω (r) . Details appear in [6]."},"refs":[{"authors":[{"name":"L. Calab"},{"name":"E. Hartnett"}],"title":{"text":"W"}},{"authors":[{"name":"D. S. Hirschber"},{"name":"M. Regnier"}],"title":{"text":"Tight bounds on the number of string subsequences"}},{"authors":[{"name":"I. A. Kas"},{"name":"M. Mitzenmache"},{"name":"J. Thale"},{"name":"J. Ullman"}],"title":{"text":"On the zero- error capacity threshold for deletion channels"}},{"authors":[{"name":"V. I. Levenshtein"}],"title":{"text":"Binary codes capable of correcting deletions, inser- tions, and reversals"}},{"authors":[{"name":"V. I. Levenshtein"}],"title":{"text":"Efﬁcient reconstruction of sequences from their subsequences or supersequences"}},{"authors":[{"name":"Y. Liro"},{"name":"M. Langberg"}],"title":{"text":"A characterization of the number of subsequences obtained via the deletion channel"}},{"authors":[{"name":"H. Mercier"}],"title":{"text":"Communication over Channels with Symbol Synchronization Errors "}},{"authors":[{"name":"H. Mercie"},{"name":"K. Bhargav"},{"name":"V. Tarokh"}],"title":{"text":"V"}},{"authors":[{"name":"H. Mercie"},{"name":"M. Khabbazia"},{"name":"V. K. Bhargava"}],"title":{"text":"On the number of subsequences when deleting symbols from a string"}},{"authors":[{"name":"M. Mitzenmacher"}],"title":{"text":"A survey of results for deletion channels and related synchronization channels"}},{"authors":[{"name":"J. Ratsaby"}],"title":{"text":"Estimate of the number of restricted integer-partitions"}}]},"file":{"jsonClass":"File","file":"/home/arnfred/Code/trailhead/resources/isit2012/1569564209.pdf"},"links":[{"id":"1569566875","weight":5},{"id":"1569565091","weight":5},{"id":"1569566571","weight":5},{"id":"1569564805","weight":5},{"id":"1569564245","weight":5},{"id":"1569565837","weight":10},{"id":"1569565317","weight":5},{"id":"1569566157","weight":5},{"id":"1569566903","weight":5},{"id":"1569564387","weight":5},{"id":"1569566795","weight":5},{"id":"1569566787","weight":5},{"id":"1569566717","weight":5},{"id":"1569566015","weight":5},{"id":"1569566895","weight":5},{"id":"1569566343","weight":5},{"id":"1569566679","weight":5},{"id":"1569566575","weight":5},{"id":"1569555999","weight":5},{"id":"1569559195","weight":5},{"id":"1569566423","weight":5},{"id":"1569566811","weight":5},{"id":"1569558901","weight":10},{"id":"1569566139","weight":5},{"id":"1569566425","weight":5},{"id":"1569566127","weight":5},{"id":"1569565929","weight":5},{"id":"1569564677","weight":5},{"id":"1569565279","weight":5},{"id":"1569566003","weight":5},{"id":"1569555787","weight":5},{"id":"1569566857","weight":5},{"id":"1569566779","weight":5},{"id":"1569566261","weight":5},{"id":"1569565093","weight":5},{"id":"1569566927","weight":5},{"id":"1569564131","weight":5},{"id":"1569564919","weight":5},{"id":"1569565353","weight":5},{"id":"1569564291","weight":10},{"id":"1569566137","weight":5},{"id":"1569564437","weight":5},{"id":"1569563975","weight":5},{"id":"1569566397","weight":5},{"id":"1569566301","weight":5},{"id":"1569564281","weight":5},{"id":"1569565631","weight":5},{"id":"1569566457","weight":5},{"id":"1569565165","weight":5},{"id":"1569566987","weight":5},{"id":"1569558697","weight":5},{"id":"1569560581","weight":5}],"meta":{"jsonClass":"HashMap$HashTrieMap","sessionid":"S3.T7.1","endtime":"15:00","authors":"Yuvalal Liron, Michael Langberg","date":"1341240000000","papertitle":"A characterization of the number of subsequences obtained via the deletion channel","starttime":"14:40","session":"S3.T7: Deletion Channels","room":"Stratton (407)","paperid":"1569564209"},"cluster":{"jsonClass":"Map$EmptyMap$"}}
