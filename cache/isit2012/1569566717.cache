{"id":"1569566717","paper":{"title":{"text":"Adaptive Synchronization Marker for Insertion/Deletion/Substitution Error Correction"},"authors":[{"name":"Masato Inoue"},{"name":"Haruhiko Kaneko"}],"abstr":{"text":"Abstract\u2014This paper proposes an adaptive selection method of synchronization marker to improve the error correction capability of insertion/deletion/substitution error correcting code. The adaptive markers are inserted into every d bits of a codeword of LDPC code, where the marker value is determined depending on the neighboring bits of the codeword. This paper also shows a forward-backward algorithm to calculate the symbol-by-symbol likelihood. Evaluation shows that the bit error rate of the proposed method is lower than that of the conventional method using ﬁxed synchronization marker."},"body":{"text":"Insertion/deletion/substitution error correction is required in some practical systems. For example, bit-patterned media (BPM) [1] require the precise synchronization of write signal timing and the position of a bit island. However, perfect syn- chronization is impossible due to the jitter in the internal clock, head vibrations, disk speed variations, and inaccurate position- ing of the bit islands or variable bit island shapes. Therefore, BPM suffers from insertion/deletion errors in the recorded data. For multiple IDS error correction, conventional error- correcting codes, such as the Fire code, Reed-Solomon code and LDPC code, however, cannot correct insertion/deletion errors efﬁciently. Although Levenshtein code [2] has inser- tion/deletion/substitution (IDS) error correction capability, this code cannot correct multiple IDS errors. Concatenation of LDPC and watermark codes has been proposed in [3]. In [4],[5], marker codes are used for synchronizations, that is, insertion/deletion error can be reduced to a burst error of moderate length by the marker code, and the error can be corrected by LDPC code.\nThis paper proposes a method which adaptively selects marker depending on neighboring bits of an LDPC codeword in order to reduce missynchronization.\nThis paper is organized as follows. Section II explains related works. Section III proposes adaptive synchronization marker. Section IV shows simulation results, and Section V concludes this paper.\nFigure 1 shows a binary IDS channel [3]. When the t-th encoded bit c t is transmitted, one of the following events occurs: a random bit is inserted before c t with probability\nP i , c t is deleted with probability P d , and c t is transmitted with probability P t = 1 − P i − P d . When c t was transmitted, c t is substituted with probability P s . For each c t , we assume that maximum insertion length is l I . To take account of l I , a normalizing constant a I = 1/(1 − P l I i ) is used. So, the combination of errors and its occurrence probability are shown in Table I.\nB. IDS Error Correcting Code using LDPC Code and Marker Code\n1) Encoding: For a vector v = (v 1 , v 2 , . . . , v k ) and integers i, j ∈ [1, k], vector [v] j i is deﬁned as [v] j i = (v i , v i+1 , . . . , v j ), where i ≤ j. Let C E be a binary LDPC code of length n E and rate R E . Each codeword c E ∈ C E is divided into subwords, c E 1 , c E 2 , . . . , c E n E /d , that is, the codeword is expressed as\n(i−1)d+1 (i = n E /d ). Let\nwhere c S i = w j ∈ W is the i-th marker for i ∈ [1, n E /d ]. The code rate of marker code is R S = d n\nTable II presents example of marker codes [4]. When n S = 3, marker (0,1,0) and (1,0,1) are inserted into LDPC codeword alternately.\n2) Decoding: Let c = (c 1 , . . . , c n ) ∈ C and r = (r 1 , . . . , r n ) be the encoded and received words, respectively. For t ∈ [0, n] and s ∈ [0, n ], let E t,s be an event that t bits are transmitted and s bits are received. Here, an event E t,s corresponds the state of the hidden Markov model (HMM) and the received word is considered as the output sequence of the HMM. The state transition probabilities of the HMM are calculated from the channel parameters. Also the output probabilities are determined from the possible combination of errors between the states E t,s and E t+1,s and the state index t , which determines whether a transmitted bit is a part of the marker or not.\nTo derive the probability of reaching to each state and the symbol-by-symbol likelihood P (r|c t = x) from the given re- ceived word, the forward-backward (FB) algorithm is used. In the FB algorithm, forward probability α(t, s) = P ([r] s 1 , E t,s ) and backward probability β(t, s) = P ([r] n s+1 |E t,s ) are calcu- lated for t ∈ [1, n − 1] and s ∈ [0, n ] as follows:\nβ(t+1, s+k)g 1 (s, s+k; x). (2)\ng 1 (s, s ; x) = P Ins (s − s − 1)P Tran (s ; x) + P Ins (s − s)P d ,\n⎧ ⎪ ⎨ ⎪ ⎩\na I P j i 1 2 j (1 ≤ j ≤ l I ) 1 \t (j = 0)\n0 \t (otherwise), P Tran (s; x) = P (r s |x)P t .\nThe product term Pr(c t = x)g 1 (s, s ; x) means the product of the state transition probability and the output probability. Initial values of α(t, s) and β(t, s) are given as follows:\nFrom α(t, s) and β(t, s), the symbol-by-symbol likelihood P (r|c t = x) is calculated as follow:\n(3) The log likelihood ratio is calculated as P ( r |c t =0) P ( r |c\nAssume that c S = (1, 0, 1) ∈ W is a marker and a part of encoded word is given as\nwhere the underlined part is the marker. In this case, consec- utive three bits, which start from two bits left to the marker, conforms with the marker. This situation might lead to poor synchronization performance of the FB algorithm.\nAs shown in the above example, missynchronization might occur when bit sequence around the marker coincides with the marker. To avoid such a situation, this paper proposes adap- tive marker. In this method, markers are adaptively decided depending on an LDPC codeword.\nThe following presents structure of adaptive marker and its decoding procedure. This paper focuses on n S = 3. A. Structure of adaptive marker\nW = {(w 1 1 , w 1 2 , w 1 3 ), (w 2 1 , w 2 2 , w 2 3 ), . . . , (w m 1 , w m 2 , w m 3 )}, where\n(w i 1 , w i 2 , w i 3 ) = (w j 1 , w j 2 , w j 3 ) for i, j ∈ [1, m]. The set W is deﬁned as\nW = {(w 1 1 , w 1 2 , w 1 3 ), (w 2 1 , w 2 2 , w 2 3 ), . . . , (w m 1 , w m 2 , w m 3 )} = {(w 1 , w 2 , w 3 ) | (w 1 , w 2 , w 3 ) ∈ W }.\nMarker code W is given as follows: W = W ∪ W\nLet c E −2 and c E −1 be two codeword bits just before i-th marker c S i = (c S 1 , c S 2 , c S 3 ). The i-th marker c S i is selected as follows:\n1 , w j 2 , w j 3 ) (otherwise), where j = (i mod m) + 1.\nExample : Figure 3 shows examples of adaptive marker. In this method, the candidate marker (w j 1 , w j 2 , w j 3 ) is compared with the neighboring bits c E −2 , c E −1 , and then the marker is decided. As illustrated in Fig. 3(a), if the candidate marker\nsatisﬁes w j 1 = c E −2 or w j 2 = c E −1 , the candidate marker is inserted into the LDPC codeword. As illustrated in Fig. 3(b), if the candidate marker satisﬁes w j 1 = c E −2 and w j 2 = c E −1 , the ﬁrst bit of candidate marker is reversed and (w j 1 , w j 2 , w j 3 ) is inserted into the LDPC codeword.\nSince the ﬁrst bit c S 1 of the adaptive marker c S i is determined depending on the preceding two codeword bits c E −2 c E −1 , the values of c E −2 c E −1 c S 1 are dependent, and hence the FB algorithm is modiﬁed accordingly.\nLet T be the the set of locations of the ﬁrst bit c S 1 of the markers given by\nT = { t | t = id + (i − 1)n S + 1, i ∈ [1, n E /d − 1] } , and let T i be the shifted set of T determined as\nForward calculation: The initial values of α(t, s) is deter- mined as α(0, 0) = 1 and α(0, s) = 0 for s ∈ [1, n ]. Then, α(t, s) is determined for t ∈ [1, n − 1] as follows: (i) if t / ∈ T ∪ T −1 ∪ T −2 , then α(t, s) is calculated from α(t − 1, s) using Eq. (1), and (ii) if t ∈ T , then α(t, s) is calculated from α(t − 3, s) using Eq. (4), where g 3 (s, s ; x 1 x 2 ) is given by Eq. (8).\nBackward calculation: The initial values of β(t, s) is deter- mined as β(n, n ) = 1 and β(n, s) = 0 for s ∈ [0, n − 1]. Then, β(t, s) is determined for t ∈ [1, n − 1] as follows: (i) if t / ∈ T −1 ∪T −2 ∪T −3 , then β(t, s) is calculated from β(t+1, s) using Eq. (2), and (ii) if t ∈ T −3 , then β(t, s) is calculated from β(t + 3, s) using Eq. (5).\nCalculation of likelihood: For non-marker locations t ∈ [1, n] \\ (T ∪ T 1 ∪ T 2 ), the likelihood P (r|c t = x) is calculated as follows: (i) if t ∈ T −2 , then P (r|c t = x) is calculated using Eq. (6), (ii) if t ∈ T −1 , then using Eq. (7), and (iii) otherwise, using Eq. (3).\nThe bit error rate (BER) is evaluated under the following conditions :\n\u2022 LDPC code rate : R E = 1 2 (code (a)), 5 6 (code (b)) \u2022 Length of marker code : n S = 3 \u2022 Marker interval : d = 12, 27, 57\nThe LDPC codes are selected from [6], and the adap- tive marker code is determined as W = W ∪ W = {(0, 1, 0), (1, 0, 1)} ∪ {(1, 1, 0), (0, 0, 1)}. For comparison, the BER of the conventional ﬁxed marker coding is also evalu- ated, where the marker code is {(0, 1, 0), (1, 0, 1)}. Table III summarizes the above coding parameters.\nFigure 5 shows the BER for P s = 0.0 using LDPC code (a), Fig. 6 the BER for P s = 0.01 using LDPC code (a), and Fig. 7 the BER for P s = 0.0 using LDPC code (b), respectively. Here, Figs. 5(a), 6(a), and 7(a) show the BER for the word which is determined from the symbol-by-symbol likelihood at the end of the FB algorithm, and Figs. 5(b), 6(b), and 7(b) show the BER for the decoded word of the sum- product algorithm.\nFrom Figs. 5(a), 6(a), and 7(a), as insertion and deletion probabilities become higher, the difference of BERs between the adaptive marker and the ﬁxed marker increases. Thus, the adaptive marker is effective to improve synchronization capability.\nFor P s = 0.0 and 0.05 ≤ P i = P d ≤ 0.07, the BER of LDPC code (a) with marker interval d = 57 is the same as the BER of LDPC code (b) with d = 12. The code rate of\nthe former case is 19 40 = 0.475, while that of the latter case is 2 3 = 0.667. Therefore, to improve the insertion/deletion error correction capability, inserting many markers is more effective than using strong LDPC codes. Further, the effect of adaptive marker increases when there are many markers. However, the amount of calculation in FB algorithm increases.\nThis paper has proposed the adaptive marker, which can be applied to insertion/deletion/substitution error-correcting codes constructed with LDPC codes and marker codes. We have presented the structure of adaptive marker and its decoding method. Evaluations have shown that the adaptive marker improves synchronization capability in FB algorithm.\nFurther research will be required to construct more general adaptive marker codes, such as codes with length n S ≥ 4, and also to develop decoding algorithm for the generalized codes. In addition, it should be discussed which marker codes are suitable for the adaptive selection method."},"refs":[{"authors":[{"name":"K. Naito"},{"name":"H. Hieda"},{"name":"M. Sakurai"},{"name":"Y. Kamata"},{"name":"K. Asakawa"}],"title":{"text":"2.5-inch disk patterned media prepared by an artiﬁcially assisted self-assembling method"}},{"authors":[{"name":"V. I. Levenshtein"}],"title":{"text":"Binary codes capable of correcting deletions, inser- tions, and reversals, "}},{"authors":[{"name":"M. C. Davey"},{"name":"D. J. C. Mackay"}],"title":{"text":"Reliable communication over channels with insertions, deletions, and substitutions, "}},{"authors":[{"name":"M. Kobayashi"},{"name":"G. Hosoya"},{"name":"H. Yagi"},{"name":"S. Hirasawa"}],"title":{"text":"A decoding algorithm for LDPC codes over insertion/deletion/substitution channels, "}},{"authors":[{"name":"F. Wang"},{"name":"D. Fertonani"}],"title":{"text":"Symbol-level synchronization and LDPC code design for insertion/deletion channels"}},{"authors":[],"title":{"text":"IEEE Std 802"}}]},"file":{"jsonClass":"File","file":"/home/arnfred/Code/trailhead/resources/isit2012/1569566717.pdf"},"links":[],"meta":{"jsonClass":"HashMap$HashTrieMap","sessionid":"S3.T7.2","endtime":"15:20","authors":"Masato Inoue, Haruhiko Kaneko","date":"1341241200000","papertitle":"Adaptive Synchronization Marker for Insertion/Deletion/Substitution Error Correction","starttime":"15:00","session":"S3.T7: Deletion Channels","room":"Stratton (407)","paperid":"1569566717"},"cluster":{"jsonClass":"Map$EmptyMap$"}}
